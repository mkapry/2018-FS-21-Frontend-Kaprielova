{"version":3,"sources":["containers/Welcome/Button.js","containers/Welcome/Welcome.js","components/Button.js","containers/index.js","containers/router.js","serviceWorker.js","index.js"],"names":["Button","props","console","log","style","react_default","a","createElement","className","type","onClick","action","title","Welcome","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","newUser","name","window","localStorage","getItem","handleClick","bind","assertThisInitialized","handleInput","e","_this2","value","target","setState","prevState","FormData","append","preventDefault","onSubmit","placeholder","handleChange","textStyle","Welcome_Button","buttonStyle","React","Component","margin","border","position","FormContainer","id","newBlog","about","handleNameChange","handleAboutChange","handleFormSubmit","objectSpread","_this3","BlogData","setItem","JSON","stringify","handleSubmit","onChange","components_Button","Home","Profile","containers_Welcome_Welcome","Blog","_ref2","match","params","BlogId","containers","key","Full","BrowserRouter","Link","to","Route","exact","path","component","Boolean","location","hostname","ReactDOM","render","router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ee53f72.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Button = (props) => {\n\tconsole.log(props.style);\n\treturn(\n\t<button\n\t\tstyle= {props.style}\n\t\tclassName = {props.type=='primary'? 'btn btn-primary' : 'btn btn-secondary'}\n\t\tonClick= {props.action} >\n\t\t{props.title}\n\t</button>)\n}\n\n\nexport default Button;","import React from 'react';\nimport './Welcome.css';\nimport Button from './Button';\n\nclass Welcome extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            newUser:{\n            name: window.localStorage.getItem('name')\n            },\n\n        }\n    this.handleClick=this.handleClick.bind(this);\n    this.handleInput=this.handleInput.bind(this);\n    }\n\n\n    handleInput(e) {\n       let value = e.target.value;\n    this.setState( prevState => ({ newUser :\n        { name: value\n        }\n\n      }), () => console.log(this.state.newUser))\n    }\n\n    handleClick(e) {\n    const name = this.state.newUser.name;\n    let formData = new FormData();\n    formData.append('name', name);\n    e.preventDefault();\n\n    }\n\n\nrender() {\n    const username = this.state.name;\n    return (\n        <form className=\"Welcome\"onSubmit={this.handleClick}>\n            <div>Welcome</div>\n\n            <input className=\"Welcome\"\n                   title= {'Username'}\n                   //value={this.state.newUser.name}\n                   placeholder = {'Enter your name'}\n                   handleChange = {this.handleInput}\n                   style={textStyle}\n            />{/* Username */}\n\n            <Button\n              action = {this.handleClick}\n              type = {'primary'}\n              title = {'Submit'}\n              style={buttonStyle}\n            /> {/* login button */}\n\n        </form>\n         );\n\n}\n}\n\nconst buttonStyle = {\n  margin : '10px 10px 10px 10px',\n  border: '5px dotted pink',\n  position: 'relative'\n}\n\nconst textStyle = {\n  margin : '30px 10px 30px 10px',\n  border: '5px dotted pink',\n  position: 'center'\n}\nexport default Welcome;","import React from 'react';\n\n\nconst Button = (props) => {\n\tconsole.log(props.style);\n\treturn(\n\t<button\n\t\tstyle= {props.style}\n\t\tclassName = {props.type=='primary'? 'btn btn-primary' : 'btn btn-secondary'}\n\t\tonClick= {props.action} >\n\t\t{props.title}\n\t</button>)\n}\n\n\nexport default Button;","import React, {Component} from 'react';\n\n/* Import Components */\n//import Input from '../components/Input';\n//import TextArea from '../components/TextArea';\nimport Button from '../components/Button';\nimport './DottedBox.css';\n\nclass FormContainer extends Component {\n  constructor(props) {\n    const BlogId = props.id;\n    super(props);\n    this.state = {\n    newBlog:{\n        name: window.localStorage.getItem('name'),\n        about: ''\n        },\n     }\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleAboutChange = this.handleAboutChange.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n\n    }\n\n   handleNameChange(e) {\n   let value = e.target.value;\n   this.setState( prevState => ({ newBlog :\n        {...prevState.newBlog, name: value\n        }\n      }), () => console.log(this.state.newBlog))\n  }\n\n\n    handleAboutChange(e) {\n    let value = e.target.value;\n    this.setState(prevState => ({\n      newBlog: {\n        ...prevState.newUser, about: value\n      }\n      }), ()=>console.log(this.state.newBlog))\n  }\n\n\n   handleFormSubmit(e) {\n    e.preventDefault();\n    let BlogData = this.state.newBlog;\n    window.localStorage.setItem(this.props.id, JSON.stringify(BlogData));\n  }\n\n  render() {\n    return (\n\n        <form className=\"DottedBox\"onSubmit={this.handleSubmit}>\n\n            <input  className=\"form-control\"\n                   title= {'Username'}\n                   name= {'name'}\n                   value={this.state.name}\n                   placeholder = {'Enter your name'}\n                   onChange = {this.handleNameChange}\n                   style={textStyle}\n\n\n                   /> {/* Name of the user */}\n          <input className=\"form-control\"\n            title={'Blog'}\n            value={this.state.about}\n            name={'Info'}\n            onChange={this.handleAboutChange}\n            placeholder={'Describe the main idea'}\n\n\n\n            />{/* Theme */}\n\n\n          <Button\n              action = {this.handleFormSubmit}\n              type = {'primary'}\n              title = {'Submit'}\n            style={buttonStyle}\n          /> { /*Submit */ }\n\n        </form>\n\n    );\n  }\n\n}\n\nconst buttonStyle = {\n  margin : '10px 10px 10px 10px',\n  border: '5px dotted pink',\n  position: 'relative'\n}\n\nconst textStyle = {\n  margin : '30px 10px 30px 10px',\n  border: '5px dotted pink',\n  position: 'center'\n}\nexport default FormContainer;","import React from 'react';\nimport { BrowserRouter as Router, Route, Link} from 'react-router-dom';\n\nimport Welcome from './Welcome/Welcome.js';\nimport FormContainer from './index.js';\n\n\nfunction Full() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to='/'>Home</Link>\n          </li>\n          <li>\n            <Link to='/profile'>Profile</Link>\n          </li>\n          <li>\n            <Link to='/Blog'>Blog</Link>\n          </li>\n        </ul>\n\n        <hr />\n\n        <Route exact path='/' component={Home} />\n        <Route path='/profile' component={Profile} />\n        <Route path='/posts' component={Blog} />\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nfunction Profile() {\n  return (\n    <div>\n      <h2>User Profile</h2>\n      <Welcome />\n    </div>\n  );\n}\n\nfunction Blogs({ match }) {\n  return (\n    <div>\n      <h2>Blogs</h2>\n      <ul>\n        <li>\n          <Link to={`${match.url}/Blog1`}>Blog #1</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/Blog2`}>Blog #2</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/Blog3`}>Blog #3</Link>\n        </li>\n      </ul>\n\n      <Route path={`${match.path}/:BlogId`} render={Blog} />\n    </div>\n  );\n}\n\nfunction Blog({ match }) {\n  return (\n    <div>\n      <h2>{match.params.BlogId}</h2>\n      <FormContainer id={match.params.BlogId} key={match.params.BlogId} />\n    </div>\n  );\n}\n\n\n\nexport default Full;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Full from './containers/router.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Full />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}